{
  "mcpServers": {
    "insurance-school-analytics": {
      "command": "npx",
      "args": [
        "-y", 
        "node",
        "-e",
        "const http = require('http'); const { URL } = require('url'); const https = require('https'); const fs = require('fs'); const path = require('path'); const SERVER_URL = 'https://a190e6a1-bc0e-470f-8fa1-8a9b6477c321-00-3sbmufpxo473c.spock.replit.dev'; const AUTH_TOKEN = 'Ry27942001$'; function sendRequest(endpoint, method = 'GET', data = null) { return new Promise((resolve, reject) => { const url = new URL(endpoint, SERVER_URL); const options = { hostname: url.hostname, port: url.port || 443, path: url.pathname + url.search, method: method, headers: { 'Content-Type': 'application/json', ...(endpoint.includes('/api/mcp') ? { 'Authorization': `Bearer ${AUTH_TOKEN}` } : {}) } }; const req = https.request(options, (res) => { let body = ''; res.on('data', (chunk) => body += chunk); res.on('end', () => { try { resolve(JSON.parse(body)); } catch (e) { resolve(body); } }); }); req.on('error', reject); if (data) req.write(JSON.stringify(data)); req.end(); }); } process.stdin.on('data', async (data) => { try { const message = JSON.parse(data.toString()); if (message.method === 'initialize') { console.log(JSON.stringify({ jsonrpc: '2.0', id: message.id, result: { protocolVersion: '2024-11-05', capabilities: { tools: {} }, serverInfo: { name: 'Insurance School Analytics', version: '1.0.0' } } })); } else if (message.method === 'tools/list') { const tools = await sendRequest('/api/mcp-discover'); console.log(JSON.stringify({ jsonrpc: '2.0', id: message.id, result: { tools: tools.tools || [] } })); } else if (message.method === 'tools/call') { const { name, arguments: args } = message.params; const result = await sendRequest('/api/mcp', 'POST', { tool_name: name, arguments: args }); console.log(JSON.stringify({ jsonrpc: '2.0', id: message.id, result: { content: [{ type: 'text', text: typeof result === 'string' ? result : JSON.stringify(result, null, 2) }] } })); } } catch (error) { console.log(JSON.stringify({ jsonrpc: '2.0', id: message.id || null, error: { code: -1, message: error.message } })); } });"
      ],
      "env": {
        "MCP_SERVER_URL": "https://a190e6a1-bc0e-470f-8fa1-8a9b6477c321-00-3sbmufpxo473c.spock.replit.dev",
        "MCP_AUTH_TOKEN": "Ry27942001$"
      }
    }
  }
}